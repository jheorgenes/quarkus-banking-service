quarkus.rest-client.situacao-cadastral-api.url=http://${QUARKUS_CLIENT_HTTP:}:${QUARKUS_CLIENT_HTTP_PORT:}

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${QUARKUS_DATASOURCE_USERNAME:}
quarkus.datasource.password=${QUARKUS_DATASOURCE_PASSWORD:}
quarkus.datasource.reactive.url=postgresql://${QUARKUS_DATASOURCE_HOST:}:${QUARKUS_DATASOURCE_PORT:}/agencia

quarkus.http.access-log.enabled=true
quarkus.http.access-log.pattern=combined

## Ativa log dos SQLs
#quarkus.hibernate-orm.log.sql=true
#
## Mostra as queries formatadas (quebradas em linhas)
#quarkus.hibernate-orm.log.format-sql=true
#
## Mostra parâmetros (substitui ? pelos valores reais)
#quarkus.hibernate-orm.log.bind-parameters=true

# Ativa o export do micrometer para o prometheus
quarkus.micrometer.export.prometheus.path=/metrics

# Configuração do Kafka
kafka.bootstrap.servers=${QUARKUS_KAFKA_SERVER:localhost}:${QUARKUS_KAFKA_PORT:9092}
# mp.messaging é o namespace do Smallrye Reactive Messaging
# incoming define que é um consumer
# connector define o connector que será usado
mp.messaging.incoming.banking-service-channel.connector=smallrye-kafka
# topic define o tópico que será consumido
mp.messaging.incoming.banking-service-channel.topic=remover-agencia
# group.id define o grupo do consumer
mp.messaging.incoming.banking-service-channel.group.id=remover-agencia-consumer-group
# value.deserializer define o deserializador
mp.messaging.incoming.banking-service-channel.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# auto.offset.reset define o offset do consumer (Pega do mais antigo pro mais atual)
mp.messaging.incoming.banking-service-channel.auto.offset.reset=earliest

# Desativa o devservices (devtools) do kafka
quarkus.kafka.devservices.enabled=false